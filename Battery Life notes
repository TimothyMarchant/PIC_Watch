NOTE: Some testing (that is me actually using a CR2032) has not matched expectations.  Although the batteries I used where repeatedly used while just testing general functionality and a few times were shorted.  
So I think this caused some problems with the lifespan.   The last tested battery, the life span was around 7 days with the watch mostly in sleep mode. I'm trying one more time with a different brand (I was using some no-name before).
I don't think this will matter, but this last attempt is with an energizer CR2032.
Also I learned that CR2032 are not suppose to sustain high current (in the panasonic datasheet for its CR2032 it has a low continuous drain 0.2mA).  I did not know this at the time of writing this originally.
 

To preface, most sources for power come from a parts datasheet (I had problems trying to use a multimeter for some parts), so each part will be listed with its current consumption, and we will compute the battery life span here.
PIC16F15225 SLEEP : <600 nA @ 3 volts
PIC16F15225 Active: approximately 4mA @ 3 volts (According to the current graphs in the datasheets, at room temperature at 3 volts it seems the PIC uses 4mA at 32 MHz.)
(the PIC only has three internal oscilators; 32MHz, 1MHz, 32KHz),
MCP7940N : 1.2 uA
MCP9700 : 6 uA (but this is barely on, so we don't really consider it).
SSD 1306 (ON) :  8.1 mA for 50% of the screen lit up at constrast set to 127 (taken from here https://bitbanksoftware.blogspot.com/2019/06/how-much-current-do-oled-displays-use.html).
To compute the average current consumption we must compute all possible current consumptions.
DEEP_SLEEP: only two things are on in this state, the PIC and the MCP7940N.  Therefore current<1.2+0.6=1.8 microamps.
Light_SLEEP: In this state the screen is active, but the PIC is in sleep and the MCP7940N is running.  Therefore current<1.2+0.6+8100=8101.8 micro amps.
Active:  The same as before, but the PIC is running: Then we have current<4000+8100+1.2=12101.2 micro amps.
We do not consider other active states since they're negliable and we are partially overestimating other states, so it should work out.
We can make certain assumptions about the activity of the watch.  Most of the time the watch will be in deep sleep.  Realistcally a user might check at most 5 minutes a day, sometimes less.  
We also will assume the user is not making changes in the settings.  It's only on the first powerup.
So we consider three cases, the user checks 5 minutes a day, 3 minutes a day, and 1.5 minutes a day or that is 0.35% of the day, 0.21%, or 0.10%.  
Further more, the PIC is realistically in sleep most of that time say at least 95% of the time.  As it takes at most 100-300 milseconds to turn on everything (although it's very hard to tell when it turns on).
Therefore, for case 1: AVG current consumption (5 mins) is less than (0.0175%*Active+0.3325%*Light_Sleep)+DEEP_SLEEP*99.65%
For case 2 (3 minutes): we have (0.0105%*Active+0.1995%*Light_Sleep)+DEEP_SLEEP*99.79%
For case 3 (1.5 minutes): we have (0.005%*Active+0.095%*LightSleep)+Deep_Sleep*99.90%
case 1<30.85, case 2<19.23, case 3<10.1 where each is in micro amps.
This is the average current consumption for each case.
Now we will assume that each case has some probability of being selected.  For this problem we will assume the user is equally likely on any given day to follow one of the three cases.
Then the expected current consumption in general is 1/3*(case 1 +case 2+ case 3)=20.06 micro amps.  The average CR2032 has about 230 mAh.  230000uAh/20.06uA=11465 hours.  Which is around 1.31 years.
So, for the average user (or at least for myself) the battery life is at least 1 year.
Obviously we are assuming the user is not forgetting to turn the watch into sleep mode or the user is actually looking at the watch.  But this is a good approximation.
This is also based on observation, as I cannot measure the timing of things very accurately, so it's based on how fast things are done visibly.
For reference the screen updates at a speed where it seems instant, so we can assume everything is done in < 300 ms vs when I tested at 1 MHz where it took probably at least 3-5 seconds to update the screen
